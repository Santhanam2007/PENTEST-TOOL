# Red Teaming and Penetration Testing Toolkit
# This script provides basic automated scanning and vulnerability analysis capabilities.
print("""
░██████╗░█████╗░███╗░░██╗████████╗██╗░░██╗░█████╗░███╗░░██╗░█████╗░███╗░░░███╗
██╔════╝██╔══██╗████╗░██║╚══██╔══╝██║░░██║██╔══██╗████╗░██║██╔══██╗████╗░████║
╚█████╗░███████║██╔██╗██║░░░██║░░░███████║███████║██╔██╗██║███████║██╔████╔██║
░╚═══██╗██╔══██║██║╚████║░░░██║░░░██╔══██║██╔══██║██║╚████║██╔══██║██║╚██╔╝██║
██████╔╝██║░░██║██║░╚███║░░░██║░░░██║░░██║██║░░██║██║░╚███║██║░░██║██║░╚═╝░██║
╚═════╝░╚═╝░░╚═╝╚═╝░░╚══╝░░░╚═╝░░░╚═╝░░╚═╝╚═╝░░╚═╝╚═╝░░╚══╝╚═╝░░╚═╝╚═╝░░░░░╚═╝

██████╗░███████╗███╗░░██╗████████╗███████╗░██████╗████████╗  ████████╗░█████╗░░█████╗░██╗░░░░░
██╔══██╗██╔════╝████╗░██║╚══██╔══╝██╔════╝██╔════╝╚══██╔══╝  ╚══██╔══╝██╔══██╗██╔══██╗██║░░░░░
██████╔╝█████╗░░██╔██╗██║░░░██║░░░█████╗░░╚█████╗░░░░██║░░░  ░░░██║░░░██║░░██║██║░░██║██║░░░░░
██╔═══╝░██╔══╝░░██║╚████║░░░██║░░░██╔══╝░░░╚═══██╗░░░██║░░░  ░░░██║░░░██║░░██║██║░░██║██║░░░░░
██║░░░░░███████╗██║░╚███║░░░██║░░░███████╗██████╔╝░░░██║░░░  ░░░██║░░░╚█████╔╝╚█████╔╝███████╗
╚═╝░░░░░╚══════╝╚═╝░░╚══╝░░░╚═╝░░░╚══════╝╚═════╝░░░░╚═╝░░░  ░░░╚═╝░░░░╚════╝░░╚════╝░╚══════╝""")

import nmap
import os
import subprocess

# Function for network scanning using nmap
def network_scan(target_ip):
    nm = nmap.PortScanner()
    print(f"Scanning target: {target_ip}")
    try:
        nm.scan(target_ip, arguments='-sS -sV -O')
        for host in nm.all_hosts():
            print(f"Host: {host} ({nm[host].hostname()})")
            print(f"State: {nm[host].state()}")
            
            for proto in nm[host].all_protocols():
                print(f"Protocol: {proto}")
                lport = list(nm[host][proto].keys())
                for port in sorted(lport):
                    print(f"Port: {port}\tState: {nm[host][proto][port]['state']}")
    except Exception as e:
        print(f"Error during network scan: {e}")

# Function for running vulnerability analysis using automated tools
def vulnerability_analysis(target_ip):
    print(f"Running vulnerability analysis on {target_ip}")
    try:
        subprocess.run(["nmap", "--script", "vuln", target_ip], check=True, timeout=300)
    except subprocess.CalledProcessError as e:
        print(f"Error occurred: {e}")
    except subprocess.TimeoutExpired:
        print("Vulnerability analysis timed out.")

# Function for launching Metasploit auxiliary scanning module
def metasploit_scan(target_ip):
    print("Starting Metasploit auxiliary scan")
    commands = f"use auxiliary/scanner/portscan/tcp\nset RHOSTS {target_ip}\nrun\nexit"
    with open("msf_script.rc", "w") as script:
        script.write(commands)
    
    try:
        subprocess.run(["msfconsole", "-r", "msf_script.rc"], check=True)
    except subprocess.CalledProcessError as e:
        print(f"Error occurred: {e}")
    except FileNotFoundError:
        print("Metasploit not found. Ensure it is installed and in your PATH.")

# Main execution logic
def main():
    target = input("Enter the target IP address: ")
    print("\n1. Network Scan")
    print("2. Vulnerability Analysis")
    print("3. Metasploit Auxiliary Scan")
    choice = input("Select an option (1/2/3): ")

    if choice == '1':
        network_scan(target)
    elif choice == '2':
        vulnerability_analysis(target)
    elif choice == '3':
        metasploit_scan(target)
    else:
        print("Invalid choice!")

if __name__ == "__main__":
    main()
